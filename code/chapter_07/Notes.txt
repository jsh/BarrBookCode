EC2 Monitoring, Auto Scaling, and Elastic Load Balancing

Chapter 7: EC2 Monitoring, Auto Scaling, and Elastic Load Balancing

 

AWS CloudWatch (CW) lets you collect stats on your instances and volumes.

 

AWS Elastic Load Balancing (ELB) lets you aggregate instances and treat them as
a single resource (an ELB volume), with the load balanced among components.

 

AWS Auto Scaling (AS) lets your ELB volumes expand and contract in response to
demand.

 

I’ve converted the programs in this chapter to work with AWSSDKforPHP and most
of them work. If you know how to fix the rest, please do.

A Useful Analogy

 

Niklaus Wirth wrote a good book called Algorithms+Data Structures = Programs .
Analogously, Schedulers+Filesystems = Operating Systems .  By the time you
finish this chapter you have the core pieces of  the AWS operating system.
 Instead of a single OS running processes, you have a cloud running clusters.
Each cluster handles a task: webserver, image processor, whatever.   Each
cluster is one or more identical EC2 instances.  The “scheduler” comprises the
elements in this chapter.  All clusters run simultaneously, but Auto Scaling
changes the horsepower of each cluster -- the “priority” -- by scaling it up or
down as demand changes.  Elastic Load Balancing makes this effective by
ensuring that all instances in a cluster share the load equally.  CloudWatch
lets you see what’s going on -- it’s the analogue to ps(1) .

 

For inter-cluster communication, you need analogues to IPC. Unix and Linux, do
that with files, pipes and FIFOs, shared memory, semaphores, message-passing,
and signals. That’s the extended meaning of “Filesystems.” AWS does it with the
two pieces you’ve already seen: S3, which stores big hunks of data, accessible
by any instance, and SQS, which is the analogue of pipes/fifos.

 

Do you think there could be a useful AWS analogue to other conventional IPCs?
If so, tell Amazon. Maybe they’ll hire you to implement it and we’ll all
benefit.  

 

Meanwhile, here’s the scheduler analogue as it exists now.

CloudWatch

 

When I started writing these notes, a couple of weeks ago, you still had to pay
for CloudWatch. You had to request the service, either from the Web Console or
the command-line tools.  Now, Amazon's made basic monitoring completely free.
(You can get even more data on your instance for a price.)

 

This gives you some sense of the speed with which AWS is changing.  Once you
sign up for AWS, they send you notices of new services and price-drops. I get a
few a month.

 

The program list_metrics.php will run without further ado.

 

It's instructive to run it, capture the output, launch an EC2 instance, then
run it again and watch the output change. I've added some scripts to help with
this:

 

 + nmetrics shows how many metrics are currently available for each instance.
 2. launch_ec2_micro.php is a trimmed-down version of chapter_05's
    ec2_setup.php. It launches a micro instance without attaching an Elastic IP
    address or extra EBS volumes.
 3. metrics-progress launches an instance, with launch_ec2_micro.php, and then
    counts metrics every minute to let you watch them come on line. The script
    runs for 20 minutes, and the first metrics won't even come on line for
    almost 10, so you'll want to do this at home, not in the workshop.

 

See how the metrics become available in stages, rather than all at once?
 Terminating your instance doesn't make the stats go away instantly, either.

 

Warning: Do not forget to terminate your instances when you finish this
experiment.  Left running, they’ll cost money.

 

If you select your instance on the AWS console, the monitoring tab, in the
bottom pane, shows you graphs of some of these metrics.

 

Get the AWS CLI Tools

 

You'll need to install a bunch of Amazon, CLI toolkits before we go anywhere.

 

In general, you'll find AWS toolkits here:

 

http://aws.amazon.com/developertools

You need these:

 

 + Amazon EC2 API Tools
 2. Amazon Cloudwatch API Tools
 3. AutoScaling API Tools
 4. Elastic Load Balancing API Tools

 

I used the script get-AWS-CLI-toolkits to download the toolkits I needed for
this chapter, and install-AWS-CLI-toolkits to install them.  You can use these,
too, but they will go out-of-date as the toolkits get updated, which is often,
so you'll need to update them as that happens. If you do change the
installation scripts, please let me know so we can push the instructions to
GitHub.

 

(Scripts aren’t just for automation. They document exactly what you did.
 Later, you never have to say later, after half-an-hour’s work, “Oh. That’s
right. I’d forgotten. I also had to set this environment variable and make that
directory.” You just read the code.)

 

These toolkits need Java, so you’ll also need a Java Runtime Environment (JRE).
My Ubuntu intallation had a JRE by default. If your distro doesn’t come with a
JRE, and you figure out what you need to install it, please add that
information here.

 

"Whoa! I’m not a Java programmer."

 

Me neither. Get over it.

Set Up the Tools

 

The book has detailed directions. You’ll need to create and download X.509
certificates from your AWS account information, and then set a bunch of
variables.  The script ec2-setup-tools documents what you’ll need.

 

After you’ve done this, test it.  To save yourself some typing, do this

 

$ ec2-setup-tools.t

 

If it fails, your setup’s wrong.  Read the book and the code, then tinker with
things until the test succeeds. Then add the information here that I took for
granted, to help other folks.

 

Once it succeeds, do this

 

$ source ec2-setup-tools

 

I also set all these variables in my .bashrc.

 

$ ln $PWD/ec2-setup-tools ~/.bash-aws

$ echo ‘[ -f ~/.bash-aws ] && source ~/.bash-aws’ >> ~/.bashrc

Try Out the Tools

 

ec2-cli-examples shows off the command-line tools, using examples from the
book. Almost everything works as advertised, except mon-get-stats, which
requires you specify an instance. The code in ec2-cli-examples shows how to use
it. Also, you no longer have to invoke ec2-monitor-instances, because simple
CloudWatch monitoring is now free and on by default. (See above.)

 

CloudWatch Almost Works

 

The supplied CloudWatch example is statistics_chart_page.php, and uses some
cool Google Chart technology. Or would if I could get it to work. I’ve
converted it to use AWSSDKforPHP, but can’t seem to figure out how to make
get_metric_statistics() return any data. I’m sure there’s a way, but I’ve
failed, and can’t even get the much-simpler example in Amazon’s on-line
documentation to work. (I’ve put that example into cw-stats-example.php .) Can
you make it work? If so, please contribute the solution.

 

More Java Setup

 

You'll also need jmeter. On my Ubuntu box that's

 

$ sudo apt-get install jmeter-java

 

Once jmeter is installed, you have to do a bunch of clicky stuff to create a
"test plan." It's in the book and I'm not going to re-type it here.

 

Is it a complete PITA that you can only do it as point-and-click? Yes, indeedy.
Do you know a better way? Excellent. Please use your knowledge to re-write this
section.

Elastic Load Balancing

 

The Elastic Load Balancing (elb) example uses Amazon’s command-line tools. The
examples in the book work. The book goes on to say that there isn’t yet PHP
toolkit support for elb.

 

There is now.  Look in AWSSDKforPHP/services and you'll see elb.class.php.  Do
you have a nice code example that exercises the elb PHP functions? Great.
 Please contribute it.

 

Auto-Scaling

 

The looong example at the end of the chapter shows off both Auto Scaling and
Elastic Load Balancing.  Like the CloudWatch example, it doesn’t work. The
first problem is with as-create-or-update-trigger, which announces that it’s
deprecated and that you should be using the new triggering mechanism. Mind, it
doesn’t hint how.

 

The second is with as-describe-scaling-activities, which always reports None.

 

I’ve put the examples from the book into as-cli-start and as-cli-stop, but they
need to be tailored a little. Still, if they worked, they’d save you some
typing.

 

What you can do, by tailoring them, is create an elb volume, and then use
test_plan_scale.jmx, within jmeter, to cause the volume to expand with
increased demand. You have to watch this from the AWS Console, though because
as-describe-scaling-activities won’t work.

 

Also, when you kill the experiment, following the steps from the book (which
I’ve put into as-cli-stop), you just have to keep trying
as-delete-auto-scaling-group until it  finally works, for the same reason.

 

Do you have a fix for the problems?  If so, please contribute them.

 

For AutoScaling, the book again says that there is not yet PHP toolkit support.
Look in AWSSDKforPHP/services and you'll see as.class.php . If it works, then
we should be able to hack together an as-describe-scaling-activities ourselves.
If you hack together an as-describe-scaling-activities that works, or some
other example that exercises these apis, please contribute it.

 

 

Edit this page (if you have permission)–Published by Google Docs–Report Abuse
–Updated automatically every 5 minutes
