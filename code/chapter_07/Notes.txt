EC2 Monitoring, Auto Scaling, and Elastic Load Balancing

Chapter 7: EC2 Monitoring, Auto Scaling, and Elastic Load Balancing

 

AWS CloudWatch (CW) lets you collect stats on your instances and volumes.

 

AWS Elastic Load Balancing (ELB) lets you aggregate instances and treat them as
a single resource (an ELB volume), with the load balanced among components.

 

AWS Auto Scaling (AS) lets your ELB volumes expand and contract in response to
demand.

 

CloudWatch

 

When I started writing these notes, a couple of weeks ago, you still had to pay
for CloudWatch. Now, Amazon's made the basic monitoring data free. That will
give you some sense of the speed with which this is moving. (You can get even
more data on your instance for a price.)

 

The program list_metrics.php will run without further ado.

 

It's instructive to run it, capture the output, launch an EC2 instance, then
run it again and watch the output change. I've added some scripts to help with
this:

 

 + nmetrics shows how many metrics are currently available for each instance.
 2. launch_ec2_micro.php is a trimmed-down version of chapter_05's
    ec2_setup.php. It launches a micro instance without attaching an Elastic IP
    address or extra EBS volumes.
 3. metrics-progress launches an instance, with launch_ec2_micro.php, and then
    counts metrics every minute to let you watch them come on line. The script
    runs for 20 minutes, and the first metrics won't even come on line for
    almost 10, so you'll want to do this at home, not in the workshop.

 

See how the metrics become available in stages, rather than all at once?
 Terminating your instance doesn't make the stats go away instantly, either.

 

Warning: Do not forget to terminate your instances when you finish this
experiment.  Left running, they’ll cost money.

 

If you select your instance on the AWS console, the monitoring tab, in the
bottom pane, shows you graphs of some of these metrics.

 

 

Get the AWS CLI Tools

 

You'll need to install a bunch of Amazon, CLI toolkits before we go anywhere.

 

In general, you'll find AWS toolkits here:

 

http://aws.amazon.com/developertools

You need these:

 

 + Amazon EC2 API Tools
 2. Amazon Cloudwatch API Tools
 3. AutoScaling API Tools
 4. Elastic Load Balancing API Tools

 

I used the script get-AWS-CLI-toolkits to download the toolkits I needed for
this chapter, and install-AWS-CLI-toolkits to install them.  You can use these,
too, but they will go out-of-date as the toolkits get updated, which is often,
so you'll need to update them as that happens. If you do that, please let me
know so we can get it into the GitHub copy.

 

(Scripts aren’t just for automation. They document exactly what you did.
 Later, you never have to say later, after half-an-hour’s work, “Oh. That’s
right. I’d forgotten. I also had to set this environment variable and make that
directory.” You just read the code.)

 

These toolkits need Java, so you’ll also need a Java Runtime Environment (JRE).
My Ubuntu intallation had a JRE by default. If yours doesn’t, and you figure
out what you need to install it, please add that information here.

 

"Whoa! I don't know Java."

 

Me neither. Get over it.

Setting Up the Tools

 

The book has detailed directions. You’ll need to create and download X.509
certificates from your AWS account information, and then set a bunch of
variables.  The script ec2-setup-tools documents what you’ll need.

 

After you’ve done this, test it.  To save yourself some typing, do this

 

$ ec2-setup-tools.t

 

If it fails, your setup’s wrong.  Read the book and the code, then tinker with
things until the test succeeds, and add information here to help other folks.

 

Once it succeeds, do this

 

$ source ec2-setup-tools

 

I also set all these variables in my .bashrc.

 

$ ln $PWD/ec2-setup-tools ~/.bash-aws

$ echo ‘[ -f ~/.bash-aws ] && source ~/.bash-aws’ >> ~/.bashrc

 

More Java Setup

 

You'll also need jmeter. On my Ubuntu box that's

 

$ sudo apt-get install jmeter-java

 

Once jmeter is installed, you have to do a bunch of clicky stuff to create a
"test plan." It's in the book and I'm not going to re-type it here.

 

Is it a complete PITA that you can only do it as point-and-click? Yes, indeedy.
Do you know a better way? Excellent. Please use your knowledge to re-write this
paragraph.

 

 

The looong example at the end of the chapter, which shows off both Auto Scaling
and Elastic Load Balancing, says that there is not yet PHP toolkit support for
these two features.

 

There is now.  Look in AWSSDKforPHP/services and you'll see as.class.php and
elb.class.php.

 

 

Edit this page (if you have permission)–Published by Google Docs–Report Abuse
–Updated automatically every 5 minutes
